# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - gqlgen/schema/*.gql

# Where should the generated server code go?
exec:
  package: gqlgen
  layout: single-file # Only other option is "follow-schema," ie multi-file.

  # Only for single-file layout:
  filename: gqlgen/generated.go

# Where should any generated models go?
model:
  package: model
  filename: gqlgen/model/models_gen.go

# Where should the resolver implementations go?
resolver:
  package: gqlgen
  layout: follow-schema # Only other option is "single-file."

  # Only for follow-schema layout:
  dir: gqlgen
  filename_template: "{name}.resolvers.go"

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: turn on to exclude root models such as Query and Mutation from the generated models file.
omit_root_models: true

# Optional: turn off to make struct-type struct fields not use pointers
# e.g. type Thing struct { FieldA OtherThing } instead of { FieldA *OtherThing }
# struct_fields_always_pointers: true

# Optional: wrap nullable input fields with Omittable
nullable_input_omittable: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  - github.com/marc-watters/sqlc-gqlgen-example/v2/pgx

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.Int64
  # gqlgen provides a default GraphQL UUID convenience wrapper for github.com/google/uuid 
  # but you can override this to provide your own GraphQL UUID implementation
  UUID:
    model:
      - github.com/jackc/pgx-gofrs-uuid.UUID

  # The GraphQL spec explicitly states that the Int type is a signed 32-bit
  # integer. Using Go int or int64 to represent it can lead to unexpected
  # behavior, and some GraphQL tools like Apollo Router will fail when
  # communicating numbers that overflow 32-bits.
  #
  # You may choose to use the custom, built-in Int64 scalar to represent 64-bit
  # integers, or ignore the spec and bind Int to graphql.Int / graphql.Int64
  # (the default behavior of gqlgen). This is fine in simple use cases when you
  # do not need to worry about interoperability and only expect small numbers.
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int32
  Int64:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
