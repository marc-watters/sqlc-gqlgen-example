package gqlgen

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"fmt"

	"github.com/99designs/gqlgen/graphql"

	"github.com/marc-watters/sqlc-gqlgen-example/v2/gqlgen/model"
	"github.com/marc-watters/sqlc-gqlgen-example/v2/pgx"
)

// CreateAgent is the resolver for the createAgent field.
func (r *mutationResolver) CreateAgent(ctx context.Context, data model.AgentInput) (*pgx.Agent, error) {
	return r.Repository.CreateAgent(ctx, pgx.CreateAgentParams{
		Name:  data.Name,
		Email: data.Email,
	})
}

// UpdateAgent is the resolver for the updateAgent field.
func (r *mutationResolver) UpdateAgent(ctx context.Context, id int64, data model.AgentInput) (*pgx.Agent, error) {
	return r.Repository.UpdateAgent(ctx, pgx.UpdateAgentParams{
		ID:    id,
		Name:  data.Name,
		Email: data.Email,
	})
}

// DeleteAgent is the resolver for the deleteAgent field.
func (r *mutationResolver) DeleteAgent(ctx context.Context, id int64) (*pgx.Agent, error) {
	return r.Repository.DeleteAgent(ctx, id)
}

// CreateAuthor is the resolver for the createAuthor field.
func (r *mutationResolver) CreateAuthor(ctx context.Context, data model.AuthorInput) (*pgx.Author, error) {
	return r.Repository.CreateAuthor(ctx, pgx.CreateAuthorParams{
		Name:    data.Name,
		Website: data.Website.Value(),
		AgentID: data.AgentID,
	})
}

// UpdateAuthor is the resolver for the updateAuthor field.
func (r *mutationResolver) UpdateAuthor(ctx context.Context, id int64, data model.AuthorInput) (*pgx.Author, error) {
	author, err := r.Repository.GetAuthor(ctx, id)
	if err != nil {
		return nil, err
	}

	if !data.Website.IsSet() {
		data.Website = graphql.OmittableOf(author.Website)
	}

	return r.Repository.UpdateAuthor(ctx, pgx.UpdateAuthorParams{
		ID:      id,
		Name:    data.Name,
		Website: data.Website.Value(),
		AgentID: data.AgentID,
	})
}

// DeleteAuthor is the resolver for the deleteAuthor field.
func (r *mutationResolver) DeleteAuthor(ctx context.Context, id int64) (*pgx.Author, error) {
	return r.Repository.DeleteAuthor(ctx, id)
}

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, data model.BookInput) (*pgx.Book, error) {
	return r.Repository.CreateBook(ctx, pgx.CreateBookParams{
		Title:       data.Title,
		Description: data.Description,
		Cover:       data.Cover,
	}, data.AuthorIDs)
}

// UpdateBook is the resolver for the updateBook field.
func (r *mutationResolver) UpdateBook(ctx context.Context, id int64, data model.BookInput) (*pgx.Book, error) {
	return r.Repository.UpdateBook(ctx, pgx.UpdateBookParams{
		ID:          id,
		Title:       data.Title,
		Description: data.Description,
		Cover:       data.Cover,
	}, data.AuthorIDs)
}

// DeleteBook is the resolver for the deleteBook field.
func (r *mutationResolver) DeleteBook(ctx context.Context, id int64) (*pgx.Book, error) {
	panic(fmt.Errorf("not implemented: DeleteBook - deleteBook"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
