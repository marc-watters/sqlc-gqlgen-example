// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: books.sql

package pgx

import (
	"context"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (title, description, cover)
VALUES ($1, $2, $3)
RETURNING id, title, description, cover
`

type CreateBookParams struct {
	Title       string
	Description string
	Cover       string
}

// CreateBook
//
//	INSERT INTO books (title, description, cover)
//	VALUES ($1, $2, $3)
//	RETURNING id, title, description, cover
func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (*Book, error) {
	row := q.db.QueryRow(ctx, createBook, arg.Title, arg.Description, arg.Cover)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Cover,
	)
	return &i, err
}

const deleteBook = `-- name: DeleteBook :one
DELETE FROM books
WHERE id = $1
RETURNING id, title, description, cover
`

// DeleteBook
//
//	DELETE FROM books
//	WHERE id = $1
//	RETURNING id, title, description, cover
func (q *Queries) DeleteBook(ctx context.Context, id int64) (*Book, error) {
	row := q.db.QueryRow(ctx, deleteBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Cover,
	)
	return &i, err
}

const getBook = `-- name: GetBook :one
SELECT id, title, description, cover FROM books
WHERE id = $1
`

// GetBook
//
//	SELECT id, title, description, cover FROM books
//	WHERE id = $1
func (q *Queries) GetBook(ctx context.Context, id int64) (*Book, error) {
	row := q.db.QueryRow(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Cover,
	)
	return &i, err
}

const listBooks = `-- name: ListBooks :many
SELECT id, title, description, cover FROM books
ORDER BY title
`

// ListBooks
//
//	SELECT id, title, description, cover FROM books
//	ORDER BY title
func (q *Queries) ListBooks(ctx context.Context) ([]*Book, error) {
	rows, err := q.db.Query(ctx, listBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Cover,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBooksByAuthorID = `-- name: ListBooksByAuthorID :many
SELECT books.id, books.title, books.description, books.cover FROM books, book_authors
WHERE books.id = book_authors.book_id AND book_authors.author_id = $1
`

// ListBooksByAuthorID
//
//	SELECT books.id, books.title, books.description, books.cover FROM books, book_authors
//	WHERE books.id = book_authors.book_id AND book_authors.author_id = $1
func (q *Queries) ListBooksByAuthorID(ctx context.Context, authorID int64) ([]*Book, error) {
	rows, err := q.db.Query(ctx, listBooksByAuthorID, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Cover,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBooksByAuthorIDs = `-- name: ListBooksByAuthorIDs :many
SELECT books.id, books.title, books.description, books.cover, book_authors.author_id FROM books, book_authors
WHERE book_authors.book_id = books.id AND book_authors.author_id = ANY($1::bigint[])
`

type ListBooksByAuthorIDsRow struct {
	ID          int64
	Title       string
	Description string
	Cover       string
	AuthorID    int64
}

// ListBooksByAuthorIDs
//
//	SELECT books.id, books.title, books.description, books.cover, book_authors.author_id FROM books, book_authors
//	WHERE book_authors.book_id = books.id AND book_authors.author_id = ANY($1::bigint[])
func (q *Queries) ListBooksByAuthorIDs(ctx context.Context, dollar_1 []int64) ([]*ListBooksByAuthorIDsRow, error) {
	rows, err := q.db.Query(ctx, listBooksByAuthorIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListBooksByAuthorIDsRow
	for rows.Next() {
		var i ListBooksByAuthorIDsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Cover,
			&i.AuthorID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :one
UPDATE books
SET title = $2, description = $3, cover = $4
WHERE id = $1
RETURNING id, title, description, cover
`

type UpdateBookParams struct {
	ID          int64
	Title       string
	Description string
	Cover       string
}

// UpdateBook
//
//	UPDATE books
//	SET title = $2, description = $3, cover = $4
//	WHERE id = $1
//	RETURNING id, title, description, cover
func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (*Book, error) {
	row := q.db.QueryRow(ctx, updateBook,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Cover,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Cover,
	)
	return &i, err
}
